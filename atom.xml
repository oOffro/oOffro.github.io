<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>奔跑的蜗牛</title>
  <subtitle>一天进步一点</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-07-31T12:50:53.268Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>远方</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>微信公众号开发工具类</title>
    <link href="http://yoursite.com/2017/07/31/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <id>http://yoursite.com/2017/07/31/微信公众号开发工具类/</id>
    <published>2017-07-31T09:53:42.000Z</published>
    <updated>2017-07-31T12:50:53.268Z</updated>
    
    <content type="html"><![CDATA[<p>微信公众号开发过程中需要用到的工具类，以及所需要的相关方法。<br>微信公众号开发中的重要拦截器–&gt;<strong>微信网页授权</strong><br><a id="more"></a></p>
<h2 id="sha1加密–-gt-SecurityUtil"><a href="#sha1加密–-gt-SecurityUtil" class="headerlink" title="sha1加密–&gt;SecurityUtil"></a>sha1加密–&gt;SecurityUtil</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>用于将微信服务器传来的token，timestamp，nonce组成的数组，经过字典排序后，执行sha1加密。返回结果与传来的signature比较，相等则返回echostr。</p>
<h3 id="字典排序"><a href="#字典排序" class="headerlink" title="字典排序"></a>字典排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String[] arr = &#123; token, timestamp, nonce &#125;;</div><div class="line">Arrays.sort(arr);</div></pre></td></tr></table></figure>
<h3 id="加密工具类"><a href="#加密工具类" class="headerlink" title="加密工具类"></a>加密工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//对str进行sha1的加密</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityUtil</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">sha1</span><span class="params">(String str)</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">			MessageDigest digest = MessageDigest.getInstance(<span class="string">"sha1"</span>);</div><div class="line">			<span class="comment">// 放入加密字符串</span></div><div class="line">			digest.update(str.getBytes());</div><div class="line">			<span class="comment">// 进行加密</span></div><div class="line">			<span class="keyword">byte</span>[] digestMsg = digest.digest();</div><div class="line">			<span class="comment">// byte转换16进制</span></div><div class="line">			<span class="keyword">for</span> (<span class="keyword">byte</span> b : digestMsg) &#123;</div><div class="line">				sb.append(String.format(<span class="string">"%02x"</span>, b));</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> sb.toString();</div><div class="line">		&#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> str;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="解析xml"><a href="#解析xml" class="headerlink" title="解析xml"></a>解析xml</h2><h3 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h3><p>将微信服务器中传来的xml格式的文件解析为字符串，获取它的值</p>
<h3 id="工具类代码"><a href="#工具类代码" class="headerlink" title="工具类代码"></a>工具类代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XmlPullParserUtil</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 参数: InputStream,Reader 为了兼容测试,使用Reader</span></div><div class="line"><span class="comment">	 * 返回值:</span></div><div class="line"><span class="comment">	 *     方案1:解析为一个java对象,抽取一个基础类BaseMsg,里面包含所有消息的公共属性,为每一种消息再定制一个子类,</span></div><div class="line"><span class="comment">	 *     让它继承与BaseMsg并且扩展自己属性(TextMsg,ImgMsg....)--&gt;需要大量的domain,不采用</span></div><div class="line"><span class="comment">	 *     方案2:直接返回一个Map,可以表示任何消息,消息的key不一致罢了.(采纳)</span></div><div class="line"><span class="comment">	 * </span></div><div class="line"><span class="comment">	 * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, String&gt; <span class="title">parse</span><span class="params">(Reader reader)</span> </span>&#123;</div><div class="line">		Map&lt;String, String&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">//1)获取xmlpull解析器</span></div><div class="line">			XmlPullParser xmlPullParser = XmlPullParserFactory.newInstance().newPullParser();</div><div class="line">			<span class="comment">//2)设置解析内容</span></div><div class="line">			xmlPullParser.setInput(reader);</div><div class="line">			<span class="comment">//3)进行解析</span></div><div class="line">			<span class="comment">//xmlpull常用事件</span></div><div class="line">			<span class="comment">//XmlPullParser.START_DOCUMENT 文档开始</span></div><div class="line">			<span class="comment">//XmlPullParser.START_TAG 标签开始</span></div><div class="line">			<span class="comment">//XmlPullParser.END_DOCUMENT 文档结束</span></div><div class="line">			<span class="comment">//XmlPullParser.END_TAG 标签结束</span></div><div class="line">			<span class="comment">//xmlpull当前事件状态</span></div><div class="line">			<span class="keyword">int</span> eventType = xmlPullParser.getEventType();</div><div class="line">			<span class="comment">//一直解析直到文档结束,意味着解析完毕</span></div><div class="line">			<span class="keyword">while</span> (eventType != XmlPullParser.END_DOCUMENT) &#123;</div><div class="line">				<span class="comment">//解析时机,就是标签开始并且标签名不为xml</span></div><div class="line">				String tagName = xmlPullParser.getName();</div><div class="line">				<span class="keyword">if</span> (eventType == XmlPullParser.START_TAG &amp;&amp; !<span class="string">"xml"</span>.equals(tagName)) &#123;</div><div class="line">					String tagContent = xmlPullParser.nextText();</div><div class="line">					result.put(tagName, tagContent);</div><div class="line">				&#125;</div><div class="line">				<span class="comment">//解析完当前事件后,需要改变当前事件为下一个事件</span></div><div class="line">				eventType = xmlPullParser.next();</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="HttpClientUtil"><a href="#HttpClientUtil" class="headerlink" title="HttpClientUtil"></a>HttpClientUtil</h2><h3 id="AccessToken"><a href="#AccessToken" class="headerlink" title="AccessToken"></a>AccessToken</h3><h4 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h4><p>使用<em>GET_ACCESSTOKEN_URL</em> 以及测试号中的两个唯一的参数值<em>APPID</em>和<em>APPSECRET</em>作为url，获取<em>ACCESS_TOKEN</em><br><em>ACCESS_TOKEN</em>用于给微信添加各种各样的功能。</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAccessToken</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">	String url = WeixinConstants.GET_ACCESSTOKEN_URL.replace(<span class="string">"APPID"</span>, WeixinConstants.APPID).replace(<span class="string">"APPSECRET"</span>,</div><div class="line">			WeixinConstants.APPSECRET);</div><div class="line">	<span class="comment">// 1 创建httpClient执行对象</span></div><div class="line">	HttpClient execution = <span class="keyword">new</span> DefaultHttpClient();</div><div class="line">	<span class="comment">// 2 创建httpGet请求</span></div><div class="line">	HttpGet httpGet = <span class="keyword">new</span> HttpGet(url);</div><div class="line">	<span class="comment">// 3 通过执行对象传入执行请求,发送请求,获取响应对象</span></div><div class="line">	HttpResponse response = execution.execute(httpGet);</div><div class="line">	<span class="comment">// 4打印状态码,用于排错</span></div><div class="line">	System.out.println(<span class="string">"statusCode:"</span> + response.getStatusLine().getStatusCode());</div><div class="line">	<span class="comment">// 4 通过响应对象获取响应实体,把响应实体转换json字符串</span></div><div class="line">	HttpEntity responseEntity = response.getEntity();</div><div class="line">	String jsonStr = EntityUtils.toString(responseEntity);</div><div class="line">	System.out.println(jsonStr);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="httpGet"><a href="#httpGet" class="headerlink" title="httpGet"></a>httpGet</h3><h4 id="作用-3"><a href="#作用-3" class="headerlink" title="作用"></a>作用</h4><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">httpGet</span><span class="params">(String url)</span> </span>&#123;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		<span class="comment">// 1.创建一个http执行器</span></div><div class="line">		HttpClient client = <span class="keyword">new</span> DefaultHttpClient();</div><div class="line">		<span class="comment">// 2.创建一个http的get请求</span></div><div class="line">		HttpGet get = <span class="keyword">new</span> HttpGet(url);</div><div class="line">		<span class="comment">// 3.在执行器中执行httpget请求,并拿到响应对象</span></div><div class="line">		HttpResponse response = client.execute(get);</div><div class="line">		<span class="comment">// 4.打印状态码,用于排错</span></div><div class="line">		System.out.println(response.getStatusLine().getStatusCode());</div><div class="line">		<span class="comment">// 5.entity里面封装了响应的内容,只需转为字符串即可</span></div><div class="line">		HttpEntity entity = response.getEntity();</div><div class="line">		<span class="keyword">return</span> EntityUtils.toString(entity);</div><div class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">		e.printStackTrace();</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="httpPost"><a href="#httpPost" class="headerlink" title="httpPost"></a>httpPost</h3><h4 id="作用-4"><a href="#作用-4" class="headerlink" title="作用"></a>作用</h4><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">httpPost</span><span class="params">(String url,String jsonParam)</span> </span>&#123;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		<span class="comment">// 1.创建一个http执行器</span></div><div class="line">		HttpClient client = <span class="keyword">new</span> DefaultHttpClient();</div><div class="line">		<span class="comment">// 2.创建一个http的post请求</span></div><div class="line">		HttpPost post = <span class="keyword">new</span> HttpPost(url);</div><div class="line">		<span class="comment">// 3.设置httppost的请求的参数</span></div><div class="line">		post.setEntity(<span class="keyword">new</span> StringEntity(jsonParam, <span class="string">"utf-8"</span>));</div><div class="line">		<span class="comment">// 4.在执行器中执行httpPost请求,拿到响应对象</span></div><div class="line">		HttpResponse response = client.execute(post);</div><div class="line">		<span class="comment">// 5.打印状态码,用于排错</span></div><div class="line">		System.out.println(response.getStatusLine().getStatusCode());</div><div class="line">		<span class="comment">// 6.entity里面封装了响应的内容,只需转为字符串即可</span></div><div class="line">		HttpEntity entity = response.getEntity();</div><div class="line">		<span class="keyword">return</span> EntityUtils.toString(entity);</div><div class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">		e.printStackTrace();</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="微信网页授权-拦截器"><a href="#微信网页授权-拦截器" class="headerlink" title="微信网页授权(拦截器)"></a>微信网页授权(拦截器)</h3><h4 id="作用-5"><a href="#作用-5" class="headerlink" title="作用"></a>作用</h4><p>用于微信网页授权登录,获取当前微信用户。<br>在企业级开发中，将微信账户和企业的账户进行绑定，可以直接使用微信浏览企业的系统。</p>
<h4 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h4><p>需要设置微信公众号中–&gt;授权回调域名(第一层域名)<br>位置：微信公众号测试账号–&gt;网页服务–&gt;网页账号–&gt;修改<br>打上@WebFilter注解,/*表示拦截所有请求<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@WebFilter</span>(<span class="string">"/*"</span>)</div></pre></td></tr></table></figure></p>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span></div><div class="line"><span class="function">		<span class="keyword">throws</span> IOException, ServletException </span>&#123;</div><div class="line">    HttpServletRequest hRequest = (HttpServletRequest) request;</div><div class="line">    HttpServletResponse hResponse = (HttpServletResponse) response;</div><div class="line">    <span class="comment">// 如果session中已经存在微信号了，就不用获取了，否则要获取，获取到以后要存放sesion</span></div><div class="line">    String fromUserName = (String) hRequest.getSession().getAttribute(<span class="string">"fromUserName"</span>);</div><div class="line">    <span class="keyword">if</span> (fromUserName == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// 只有在微信端才做里面的操作</span></div><div class="line">        String agent = hRequest.getHeader(<span class="string">"User-Agent"</span>);</div><div class="line">        <span class="keyword">if</span> (agent != <span class="keyword">null</span> &amp;&amp; agent.toLowerCase().indexOf(<span class="string">"micromessenger"</span>) &gt;= <span class="number">0</span>) &#123;</div><div class="line">            String code = request.getParameter(<span class="string">"code"</span>);</div><div class="line">            String state = request.getParameter(<span class="string">"state"</span>);</div><div class="line">            <span class="comment">// 如果code不为空，scope为base,scope为userInfo代表用户已经同意,只需发送openid的请求来获取openid</span></div><div class="line">            <span class="keyword">if</span> (code != <span class="keyword">null</span> &amp;&amp; state != <span class="keyword">null</span> &amp;&amp; state.equals(<span class="string">"1"</span>)) &#123;</div><div class="line">            System.out.println(<span class="string">"1111111111111"</span>);</div><div class="line">            <span class="comment">// 通过Code获取openid来进行授权</span></div><div class="line">            String url = WeixinConstants.AUTH_GET_OID.replace(<span class="string">"APPID"</span>, WeixinConstants.APPID)</div><div class="line">					.replace(<span class="string">"SECRET"</span>, WeixinConstants.APPSECRET).replace(<span class="string">"CODE"</span>, code);</div><div class="line">            String json = HttpClientUtil.httpGet(url);</div><div class="line">            String openid = JSONObject.parseObject(json).getString(<span class="string">"openid"</span>);</div><div class="line">            hRequest.getSession().setAttribute(<span class="string">"fromUserName"</span>, openid);</div><div class="line">            System.out.println(openid + <span class="string">"33333333333"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            System.out.println(<span class="string">"2222222222222222"</span>);</div><div class="line">            <span class="comment">// 发送用户同意的请求</span></div><div class="line">            String path = hRequest.getRequestURL().toString();</div><div class="line">            String query = hRequest.getQueryString();</div><div class="line">            <span class="keyword">if</span> (query != <span class="keyword">null</span>) &#123;</div><div class="line">                path = path + <span class="string">"?"</span> + query;</div><div class="line">            &#125;</div><div class="line">            System.out.println(path);</div><div class="line">            String uri = WeixinConstants.AUTH_URL.replace(<span class="string">"APPID"</span>, WeixinConstants.APPID)</div><div class="line">                .replace(<span class="string">"REDIRECT_URI"</span>, URLEncoder.encode(path, <span class="string">"UTF-8"</span>))</div><div class="line">                .replace(<span class="string">"SCOPE"</span>, <span class="string">"snsapi_userinfo"</span>).replace(<span class="string">"STATE"</span>, <span class="string">"1"</span>);</div><div class="line">            hResponse.sendRedirect(uri);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">chain.doFilter(hRequest, hResponse);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;微信公众号开发过程中需要用到的工具类，以及所需要的相关方法。&lt;br&gt;微信公众号开发中的重要拦截器–&amp;gt;&lt;strong&gt;微信网页授权&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="工具类" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    
    
      <category term="微信" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="工具类" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>微信公众号入门笔记(二)</title>
    <link href="http://yoursite.com/2017/07/31/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%8C)/"/>
    <id>http://yoursite.com/2017/07/31/微信公众号学习笔记(二)/</id>
    <published>2017-07-31T01:10:41.000Z</published>
    <updated>2017-07-31T13:24:37.444Z</updated>
    
    <content type="html"><![CDATA[<p>在学习微信公众号中一些值得注意的点。<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1445241432" target="_blank" rel="external">微信公众平台技术文档</a><br><strong>自定义菜单与绑定用户</strong><br><a id="more"></a></p>
<h2 id="自定义菜单"><a href="#自定义菜单" class="headerlink" title="自定义菜单"></a>自定义菜单</h2><h3 id="菜单的限制"><a href="#菜单的限制" class="headerlink" title="菜单的限制"></a>菜单的限制</h3><p>1、自定义菜单最多包括3个一级菜单，每个一级菜单最多包含5个二级菜单。<br>2、一级菜单最多4个汉字，二级菜单最多7个汉字，多出来的部分将会以“…”代替。</p>
<h3 id="菜单的类型-type"><a href="#菜单的类型-type" class="headerlink" title="菜单的类型(type)"></a>菜单的类型(type)</h3><p>1、click：点击推事件用户点击click类型按钮后，微信服务器会通过消息接口推送消息类型为event的结构给开发者（参考消息接口指南），并且带上按钮中开发者填写的key值，开发者可以通过自定义的key值与用户进行交互；<br>2、view：跳转URL用户点击view类型按钮后，微信客户端将会打开开发者在按钮中填写的网页URL，可与网页授权获取用户基本信息接口结合，获得用户基本信息。</p>
<h2 id="fastJson"><a href="#fastJson" class="headerlink" title="fastJson"></a>fastJson</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote>
<p>Fastjson是一个Java语言编写的高性能的JSON处理器,由阿里巴巴公司开发。<br>无依赖，不需要例外额外的jar，能够直接跑在JDK上。<br>FastJson在复杂类型的Bean转换Json上会出现一些问题，可能会出现引用的类型，导致Json转换出错，需要制定引用。<br>FastJson采用独创的算法，将parse的速度提升到极致，超过所有json库。</p>
</blockquote>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>有两个核心类,一个对象–&gt;JSONObject , 一个数组–&gt;JSONArray</p>
<h2 id="JSONObject"><a href="#JSONObject" class="headerlink" title="JSONObject"></a>JSONObject</h2><p>是一个Map，用做菜单的对象，包括根对象，一级菜单对象，二级菜单对象。<br>根对象作为按钮，装入一级菜单容器<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root.put(<span class="string">"button"</span>, oneLevelMenus);</div></pre></td></tr></table></figure></p>
<p>一级菜单对象，作为子按钮，装二级菜单容器<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">function.put(<span class="string">"sub_button"</span>, functionTwoLevelMenus);</div><div class="line">business.put(<span class="string">"sub_button"</span>, businessTwoLeverMenus);</div></pre></td></tr></table></figure></p>
<h2 id="JSONArray"><a href="#JSONArray" class="headerlink" title="JSONArray"></a>JSONArray</h2><p>1.一个容器，一级菜单容器用来装一级菜单对象，二级菜单容器装二级菜单对象。<br>2.一级菜单对象中装二级菜单容器，根对象装一级菜单容器</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在学习微信公众号中一些值得注意的点。&lt;a href=&quot;https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;amp;id=mp1445241432&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;微信公众平台技术文档&lt;/a&gt;&lt;br&gt;&lt;strong&gt;自定义菜单与绑定用户&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="微信" scheme="http://yoursite.com/categories/%E5%BE%AE%E4%BF%A1/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="微信" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>微信公众号入门笔记(一)</title>
    <link href="http://yoursite.com/2017/07/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/07/30/学习笔记/</id>
    <published>2017-07-29T16:04:46.000Z</published>
    <updated>2017-07-31T13:10:48.667Z</updated>
    
    <content type="html"><![CDATA[<p>在学习微信公众号中一些值得注意的点。<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1445241432" target="_blank" rel="external">微信公众平台技术文档</a><br><strong>环境搭建与消息的接收和回复</strong><br><a id="more"></a></p>
<h2 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a><strong>开发环境搭建</strong></h2><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>微信服务器转发请求给用户服务器，就需要接入认证。首先需要将本地服务器映射到外网。需要使用映射软件。<br><br>常见的映射软件有:<font color="#0099ff" size="4" face="黑体"><a href="http://hsk.oray.com/" target="_blank" rel="external">花生壳</a></font>，<font color="#0099ff" size="4" face="黑体"><a href="http://www.nat123.com/" target="_blank" rel="external">nat123</a></font>。<br>这里采用的是花生壳</p>
<h3 id="配置外网映射"><a href="#配置外网映射" class="headerlink" title="配置外网映射"></a>配置外网映射</h3><p>配置十分简单，注意内网与外网的端口，均选择80</p>
<h3 id="测试号接入"><a href="#测试号接入" class="headerlink" title="测试号接入"></a>测试号接入</h3><p>采用密文认证的方式<br></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/index"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</div><div class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">signature</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="comment">// 接收4个参数</span></div><div class="line">        String token = <span class="string">"weixin"</span>;</div><div class="line">        String signature = request.getParameter(<span class="string">"signature"</span>);</div><div class="line">        String timestamp = request.getParamete(<span class="string">"timestamp"</span>);</div><div class="line">        String nonce = request.getParameter(<span class="string">"nonce"</span>);</div><div class="line">        String echostr = request.getParameter(<span class="string">"echostr"</span>);</div><div class="line">        <span class="comment">// 1）将token、timestamp、nonce三个参数进行字典(数组)序排序</span></div><div class="line">        String[] arr = &#123; token, timestamp, nonce &#125;;</div><div class="line">        <span class="comment">// 2）将三个参数字符串拼接成一个字符串进行sha1加密</span></div><div class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">for</span> (String param : arr) &#123;</div><div class="line">            sb.append(param);</div><div class="line">        &#125;</div><div class="line">        String content = sb.toString();</div><div class="line">        <span class="comment">// sha1加密</span></div><div class="line">        String security = SecurityUtil.sha1(content);</div><div class="line">        <span class="comment">// 3）开发者获得加密后的字符串可与signature对比，标识该请求来源于微信</span></div><div class="line">        <span class="keyword">if</span> (security.equals(signature)) &#123;</div><div class="line">            response.getWriter().println(echostr);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// 认证失败</span></div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"认证失败!"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br></p>
<font color="#0099ff" size="4" face="黑体"><a href="https://ooffro.github.io/2017/07/31/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B1%BB/" target="_blank" rel="external">sha1加密</a></font>

<p>微信公众号测试号接口配置信息<br>URL：为外网映射的地址+Controller中的映射地址。如：<a href="http://offieo.6655.la/index" target="_blank" rel="external">http://offieo.6655.la/index</a><br>Token：自己填写，这里是“weixin”</p>
<p>注意点：<br>1 明文模式，是直接回传Token的值，但是在密文模式，需要根据认证的结果保存参数来作为加解密的依据。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">response.getWriter().println(Token);</div></pre></td></tr></table></figure></p>
<p>2 如果改变了地址，需要重新认证。<br>3 认证地址必须以http开头，并且端口是80 </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在学习微信公众号中一些值得注意的点。&lt;a href=&quot;https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;amp;id=mp1445241432&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;微信公众平台技术文档&lt;/a&gt;&lt;br&gt;&lt;strong&gt;环境搭建与消息的接收和回复&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="微信" scheme="http://yoursite.com/categories/%E5%BE%AE%E4%BF%A1/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="微信" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/07/29/hello-world/"/>
    <id>http://yoursite.com/2017/07/29/hello-world/</id>
    <published>2017-07-29T08:10:20.126Z</published>
    <updated>2017-07-30T17:48:06.186Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
